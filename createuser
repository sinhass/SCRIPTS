#!/bin/bash
# Author : Siddhartha S Sinha
# Rev 0.1
# Date: 01/28/2017
# Barefoot Networks
#
# Global Variables
#
blink=$(tput blink)
offblink=$(tput sgr0)
reverse=$(tput smso)
bold=$(tput bold)
offbold=$(tput rmso)
COLUMNS=80
LINES=24
TERM=vt220
export COLUMNS LINES TERM
DATE=$(date +%m%d%y)
ADMIN=ssinha@barefootnetworks.com
RADSERVER=bfrad01.barefoot-int.lan
VPNSERVER=openvpn.barefoot-int.lan
RADIUSPATH=/etc/raddb/users
VPNGROUP=/etc/group
#
# Will Pause the screen to read the error messages.
Pause()
{
        echo ""
        echo "Hit Enter to clear the Screen and Continue........"
        read
tput clear
}
# Get Yes or No as answer

GetYesNo()	{
	_ANSWER=
	if  [ $# -eq 0 ]; then
	echo "Usage: GetYesNo message" 1>&2
	exit 1
	fi

while :
do
	if [ "`echo -n`" = "-n" ]; then
		echo "$@\c"
		else
			echo -n "$@"
	fi

	read _ANSWER
	case "$_ANSWER" in
		[yY] | yes | YES | Yes)		return 0 ;;
		[nN] | no  | NO  | No )		return 1 ;;
		* ) echo "Please Enter y or n."		 ;;
	esac
tput clear
done
}


# Collect next availble User/Group ID information from LDAP Server
#
HIGHEST_UID=`getent passwd | awk -F ":" '{print $3}' | grep -v 65534 |  \
             sort -n | tail -1`
NEW_UID=$(($HIGHEST_UID + 1))
echo "1. Next available User ID=$NEW_UID"


AUTO_PASS_OLD() {

   chars='!%_+='
   { </dev/urandom LC_ALL=C grep -ao '[A-Za-z0-9]'  | head -n$((RANDOM % 8 + 4))
      echo ${chars:$((RANDOM % ${#chars})):1}   # Random special char.
    } | shuf | tr -d '\n'

   }

# COMMENT OUT ONE OF THESE LINE BELOW
AUTO_PASS () {
  newpass=$(pwgen 8 -y 1)
  export newpass
  cat /dev/null > /tmp/$AUTOUSER.txt
  echo " Username: $AUTOUSER" >>/tmp/$AUTOUSER.txt
  echo " Password: $newpass" >>/tmp/$AUTOUSER.txt

 }

# Collect new Employee name
COLLECT_USER_NAME () {
  echo -n "Enter First Name(Middle name/initial will be discarded):"
  read FIRST_NAME
  FIRST_NAME=$(echo "${FIRST_NAME,,}"|cut -d' ' -f1)
  export FIRST_NAME
  echo -n "Enter Last Name:"
  read LAST_NAME
  LAST_NAME=$(echo "${LAST_NAME,,}"|cut -d ' ' -f2)
  export LAST_NAME
 }

CHECK_USER () {
  getent passwd |grep -w "$AUTOUSER" >/dev/null 2>&1
  {
  if [[ $? -eq 0 ]];
   then
    echo "User ID: $AUTOUSER is not available."
    exit 1
    Pause
  fi
        }
  }

MANUAL_USERCREATE () {
  echo -n "Type user name you want to create:"
  read AUTOUSER
  export AUTOUSER
  CHECK_USER
  rm /tmp/$AUTOUSER.txt
  echo " Username: $AUTOUSER" >>/tmp/$AUTOUSER.txt
 }

READPASS() {

	echo -n "Please enter the new password:"
	 unset newpass;
                while IFS= read -r -s -n1 newpass1; do
                if [[ -z $newpass1 ]]; then
                echo
                break
                else
                echo -n '*'
                newpass+=$newpass1
                fi
                done


	echo ""
	echo -n "Please verify the new password:"
                while IFS= read -r -s -n1 newpass2; do
                if [[ -z $newpass2 ]]; then
                echo
                break
                else
                echo -n '*'
                newpassNEW+=$newpass2
                fi
                done


	echo ""
	if [ $newpass == $newpassNEW ]; then
	{
	if GetYesNo "Do you want to continue ? [y/n]"
    then
	  echo "OK, I will use that password and will send you in an email."
    export newpass
    echo " password: $newpass" >>/tmp/$AUTOUSER.txt
		else
		echo "Please start again"
		exit 1
		fi
	}
	else
	echo "Passwords don't match. Please start again."
	exit 1
	fi
	}



# Create the user using first and last name and password autogenerated.

CREATE_AUTOUSER () {
  AUTOUSER=${FIRST_NAME:0:1}$LAST_NAME
  getent passwd|awk -F":" '{print $1}'|grep -w $AUTOUSER >/dev/null 2>&1
  {
    if [[ $? -eq 0 ]]; then
      echo "User Name $AUTOUSER exists. Trying next.."
      AUTOUSER="$FIRST_NAME"
      getent passwd|awk -F":" '{print $1}'|grep -w $AUTOUSER >/dev/null 2>&1
      {
       if [[ $? -eq 0 ]]; then
         echo "User Name $AUTOUSER exists. Trying next.."
         AUTOUSER="$FIRST_NAME${LAST_NAME:0:1}"
         getent passwd|awk -F":" '{print $1}'|grep -w $AUTOUSER >/dev/null 2>&1
        {
          if [[ $? -eq 0 ]]; then
            echo "User Name $AUTOUSER exists. Trying next.."
            AUTOUSER=$LAST_NAME${FIRST_NAME:0:1}
            getent passwd|awk -F":" '{print $1}'|grep -w $AUTOUSER >/dev/null 2>&1
          {
            if [[ $? -eq 0 ]]; then
              echo "User Name is $AUTOUSER exists. Trying next.."
              AUTOUSER=${FIRST_NAME:0:4}${LAST_NAME:0:4}
              getent passwd|awk -F":" '{print $1}'|grep -w $AUTOUSER >/dev/null 2>&1
              {
               if [[ $? -eq 0 ]]; then
                   echo "User Name is $AUTOUSER is also not available."
                   echo "Please try manually."
                   exit 1
	             else
                  export AUTOUSER
               fi
             }

            else
             export AUTOUSER
            fi
          }

         else
            export AUTOUSER
         fi

       }
       else
        export AUTOUSER
       fi
     }
    else
      export AUTOUSER
    fi

   }


}


CREATE_LDAP_USER() {
  echo "Now I will create Unix and VPN account with this information."
  smbldap-groupadd -g $NEW_UID $AUTOUSER
    {
     if [[ $? -ne 0 ]]; then
      echo "Unable to create Group for USER_NAME. Please investigate."
      exit 1
      Pause
     fi
  }
  smbldap-useradd -N $FIRST_NAME -S $LAST_NAME -c "$FIRST_NAME $LAST_NAME" \
      -u $NEW_UID -g $NEW_UID -G hw -m $AUTOUSER \
      -M "$FIRST_NAME.$LAST_NAME@barefoot.networks.com" -p "$newpass"
    {
     if [[ $? -ne 0 ]]; then
      echo "Unable to create USER_NAME. Please investigate."
      exit 1
      Pause
    fi
   }
 }


CREATE_RADIUS_USER () {

    TMPPASS=$(smbencrypt $newpass >/tmp/xx)
    SAMBAPASS=$(cat /tmp/xx|awk '{print $2}')
    echo $SAMBAPASS
  	export SAMBAPASS
    CREATE_LINE="$AUTOUSER	NT-Password := '$SAMBAPASS'"
    echo $CREATE_LINE >/tmp/xx
    ssh -q $RADSERVER "cat /etc/raddb/users|grep $AUTOUSER"
      if [[ $? -eq 0 ]]; then
        echo "There is one radius user with same user name"
        exit 1
      else
#       scp -rp /tmp/xx $RADSERVER:/tmp
#        ssh -q $RADSERVER 'cp /etc/raddb/users /etc/raddb_BACKUP/users.$DATE && \
#                        cat /tmp/xx >>/etc/raddb/users; service radiusd restart'
       ssh -q $RADSERVER "perl -ni.bk -e 'print unless /\Q$AUTOUSER\E/' $RADIUSPATH && perl -pi.bk -e 'print qq/$AUTOUSER              NT-Password := '$SAMBAPASS' \n/ if eof;' $RADIUSPATH"
		       if [[ $? -ne 0 ]]; then
              echo "Something is not right. I am reseting the file to previous state."
              echo" Check manually."
              ssh -q $RADSERVER 'cp /etc/raddb_BACKUP/users.$DATE /etc/raddb && \
                              service radiusd restart'
              Pause
            fi
       fi
}

CREATEVPN () {

# Add the new user to vpnusers Group

  ssh $VPNSERVER "usermod -G vpnusers $AUTOUSER"

# Create google-authenticator code and account for user and save it locally.

  echo "google-authenticator information:" >>/tmp/$AUTOUSER.txt
  ssh $VPNSERVER "su - $AUTOUSER -c 'google-authenticator \
                   -t -d -f -r 3 -R 60 -W'" >>/tmp/$AUTOUSER.txt

}


DISABLE_USER () {

  echo -n "Type the user name:"
  read DISABLE_USER_NAME
      if GetYesNo "Do you want to deactivate $DISABLE_USER_NAME? [y/n]:"
        then
        # Remove Radius access and varify if it still ok after running the script.
        ssh -q $RADSERVER "sed -i.$DATE '/^$DISABLE_USER_NAME/d' $RADIUSPATH && service radiusd restart"
         {
         if [[ $? -ne 0 ]]; then
           echo " I think Radius Server is broken. Please logon to $RADSERVER and check it."
         else
           echo "Removed radius(WiFi) access of $DISABLE_USER_NAME."
           exit 1
           Pause
         fi
        }
        # Now Disable LDAP Unix Access.
        smbldap-usermod --shadowexpire 0 $DISABLE_USER_NAME
        smbldap-usermod -L $DISABLE_USER_NAME

        # Now remove vpn access
        ssh $VPNSERVER "sed -i.bak 's/$DISABLE_USER_NAME//' $VPNGROUP"
      else
        echo "You have selected not to deactivate $DISABLE_USER_NAME. Goodbye"
        Pause
    fi
}


DELETE_USER () {

  echo -n "Type the user name:"
  read DELETE_USER_NAME
    if GetYesNo "Do you want to remove  $DELETE_USER_NAME? [y/n]:"
     then
      echo "/home/$DELETE_USER_NAME will not be deleted. This feature is"
      echo "available only for testing scripts only. DO NOT use this to remove"
      echo "any user who left company. Ask Li-Siang/Mor/Anu/Ajay before removing"
      echo "any file/folder. Will remove the user id/group only from LDAP/VPN/Radius."
      echo "Press ctrl+c if you don't want to run this feature."
      Pause
      smbldap-userdel $DELETE_USER_NAME
      smbldap-groupdel $DELETE_USER_NAME
      # Remove Radius access and varify if it still ok after running the script.
      ssh -q $RADSERVER "sed -i.$DATE '/^$DELETE_USER_NAME/d' $RADIUSPATH && service radiusd restart"
         {
       if [[ $? -ne 0 ]]; then
         echo " I think Radius Server is broken. Please logon to $RADSERVER and check it."
       else
         echo "Removed radius(WiFi) access of $DELETE_USER_NAME."
         exit 1
         Pause
       fi
         }

      # Now remove vpn access
      ssh $VPNSERVER "sed -i.bak 's/$DELETE_USER_NAME//' $VPNGROUP"
    else
      echo "You have selected not to deactivate $DELETE_USER_NAME. Goodbye"
      Pause
    fi

}

SEND_MAIL () {

cat /tmp/$AUTOUSER.txt | mailx -s "$AUTOUSER Account information" $ADMIN

}

CREATEUSER_MAIN_MENU()
{

tput clear
echo "               $blink$reverse Barefoot IT  User Management Tool$offblink$offbold"
echo "                              $reverse  $offbold "
echo "$reverse                                                               $offbold "
echo "$reverse  $offbold 1.Automatic Unix/VPN/Wifi account/password.               $reverse  $offbold"
echo "$reverse  $offbold 2.Manually add user account.                              $reverse  $offbold"
echo "$reverse  $offbold 3.Add Radius user only.                                   $reverse  $offbold"
echo "$reverse  $offbold 4.Add OpenVPN client.                                     $reverse  $offbold"
echo "$reverse  $offbold 5.Deactivate account                                      $reverse  $offbold"
echo "$reverse  $offbold 6.Delete user name only.(Data will not be deleted)        $reverse  $offbold"
echo "$reverse  $offbold 7.New Fuction test Area (Use this to test new features)   $reverse  $offbold"
echo "$reverse  $offbold 8.Help/FAQ                                                $reverse  $offbold"
echo "$reverse  $offbold q.Quit or CTRL+C any time to quit                         $reverse  $offbold"
echo "$reverse  $offbold                                                           $reverse  $offbold"
echo "$reverse                                                               $offbold "
echo "$reverse  $offbold             Author: Siddhartha Sankar Sinha               $reverse  $offbold"
echo "$reverse                                                               $offbold "
echo -n "               SELECT ONE OPTION :"
}


while :
do
CREATEUSER_MAIN_MENU
read SELECTION
case $SELECTION in
1) COLLECT_USER_NAME && CREATE_AUTOUSER;AUTO_PASS && CREATE_LDAP_USER; Pause; CREATE_RADIUS_USER && CREATEVPN && SEND_MAIL
;;
2) COLLECT_USER_NAME && MANUAL_USERCREATE && READPASS && CREATE_LDAP_USER && CREATE_RADIUS_USER && CREATEVPN && SEND_MAIL
;;
3) echo "This feature is not available yet."
   Pause
;;
4)echo "This feature is not available yet."
   Pause
;;
5) DISABLE_USER && Pause
;;
6) DELETE_USER
   Pause
;;
7) READPASS
   Pause
;;
8) echo "Still in development process. Check later."
   Pause
;;
Q|q) exit
;;
*)
tput clear
echo "\007\007\007\c"
echo "\nThis Choice doesn't exist. Pls choose one from Menu\n"
;;
esac
done
